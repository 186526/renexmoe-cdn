{"version":3,"sources":["webpack:///../node_modules/highlight.js/lib/core.js","webpack:///../node_modules/highlight.js/lib/languages/apache.js","webpack:///../node_modules/highlight.js/lib/languages/arduino.js","webpack:///../node_modules/highlight.js/lib/languages/armasm.js","webpack:///../node_modules/highlight.js/lib/languages/asciidoc.js","webpack:///../node_modules/highlight.js/lib/languages/autohotkey.js","webpack:///../node_modules/highlight.js/lib/languages/autoit.js","webpack:///../node_modules/highlight.js/lib/languages/avrasm.js","webpack:///../node_modules/highlight.js/lib/languages/awk.js","webpack:///../node_modules/highlight.js/lib/languages/bash.js"],"names":["deepFreeze","obj","Map","clear","delete","set","Error","Set","add","Object","freeze","getOwnPropertyNames","forEach","name","prop","isFrozen","deepFreezeEs6","_default","default","Response","mode","undefined","data","this","ignore","escapeHTML","value","replace","inherit","original","objects","result","create","key","emitsWrappingTags","node","kind","HTMLRenderer","parseTree","options","buffer","classPrefix","walk","text","className","sublanguage","span","TokenTree","rootNode","children","stack","length","top","push","pop","closeNode","JSON","stringify","builder","constructor","_walk","addText","openNode","child","every","el","join","_collapse","TokenTreeEmitter","super","emitter","root","source","re","IDENT_RE","UNDERSCORE_IDENT_RE","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","BACKSLASH_ESCAPE","begin","relevance","APOS_STRING_MODE","end","illegal","contains","QUOTE_STRING_MODE","PHRASAL_WORDS_MODE","COMMENT","modeOptions","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","BINARY_NUMBER_MODE","CSS_NUMBER_MODE","REGEXP_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD","MODES","__proto__","MATCH_NOTHING_RE","RE_STARTERS_RE","SHEBANG","opts","beginShebang","binary","args","map","x","concat","m","resp","index","ignoreMatch","END_SAME_AS_BEGIN","assign","_beginMatch","skipIfhasPrecedingDot","match","response","input","beginKeywords","parent","split","__beforeBegin","keywords","compileIllegal","_parent","Array","isArray","either","compileMatch","compileRelevance","COMMON_KEYWORDS","compileKeywords","rawKeywords","caseInsensitive","compiledKeywords","compileList","keys","keywordList","toLowerCase","keyword","pair","scoreForKeyword","providedScore","Number","includes","commonKeyword","compileLanguage","language","plugins","langRe","global","RegExp","case_insensitive","MultiRegex","matchIndexes","regexes","matchAt","position","toString","exec","countMatchGroups","terminators","matcherRe","regexps","separator","backreferenceRe","numCaptures","ret","i","offset","substring","String","lastIndex","s","findIndex","matchData","splice","ResumableMultiRegex","rules","multiRegexes","count","regexIndex","matcher","slice","addRule","compile","type","getMatcher","resumingScanAtSamePosition","m2","considerAll","compilerExtensions","classNameAliases","compileMode","cmode","compiled","ext","keywordPattern","$pattern","lexemes","keywordPatternRe","beginRe","endSameAsBegin","endsWithParent","endRe","terminatorEnd","illegalRe","c","variants","cachedVariants","variant","dependencyOnParent","starts","expandOrCloneMode","mm","term","rule","buildModeRegex","BuildVuePlugin","hljs","Component","props","detectedLanguage","unknownLanguage","computed","autoDetect","getLanguage","console","warn","code","highlightAuto","highlight","ignoreIllegals","autodetect","Boolean","createElement","class","domProps","innerHTML","highlighted","VuePlugin","Vue","component","mergeHTMLPlugin","block","originalStream","nodeStream","resultNode","document","processed","nodeStack","selectStream","event","open","attributeString","attr","nodeName","tag","call","attributes","close","render","stream","reverse","substr","mergeStreams","_nodeStream","firstChild","nextSibling","nodeType","nodeValue","error","message","log","deprecated","version","escape$1","inherit$1","NO_MATCH","Symbol","languages","aliases","SAFE_MODE","fixMarkupRe","LANGUAGE_NOT_FOUND","PLAINTEXT_LANGUAGE","disableAutodetect","noHighlightRe","languageDetectRe","tabReplace","useBR","__emitter","shouldNotHighlight","languageName","test","continuation","context","fire","_highlight","codeToHighlight","keywordData","matchText","prototype","hasOwnProperty","processBuffer","subLanguage","modeBuffer","continuations","addSublanguage","processSubLanguage","buf","keywordRelevance","cssClass","addKeyword","processKeywords","startNewMode","endOfMode","matchPlusRemainder","matched","lexeme","startsWith","endsParent","doIgnore","resumeScanAtSamePosition","doBeginMatch","newMode","beforeCallbacks","cb","skip","excludeBegin","returnBegin","doEndMatch","endMode","origin","returnEnd","excludeEnd","lastMatch","processLexeme","textBeforeMatch","err","badRule","iterations","md","list","current","unshift","item","processContinuations","processedCount","closeAllNodes","finalize","toHTML","Math","floor","illegalBy","msg","sofar","errorRaised","languageSubset","plaintext","justTextHighlightResult","results","filter","autoDetection","sorted","sort","a","b","supersetOf","best","secondBest","second_best","brPlugin","TAB_REPLACE_RE","tabReplacePlugin","highlightBlock","element","classes","parentNode","find","_class","blockLanguage","textContent","currentLang","resultLang","classList","updateClassName","relavance","initHighlighting","called","querySelectorAll","wantsHighlight","domLoaded","highlightAll","registerAliases","aliasList","alias","lang","plugin","window","addEventListener","fixMarkup","arg","html","configure","userOptions","initHighlightingOnLoad","registerLanguage","languageDefinition","error$1","rawDefinition","bind","listLanguages","requireLanguage","addPlugin","vuePlugin","debugMode","safeMode","versionString","HLJS","module","exports","IP_ADDRESS","nomarkup","literal","optional","ARDUINO_KW","ARDUINO","DECLTYPE_AUTO_RE","NAMESPACE_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","STRINGS","NUMBERS","PREPROCESSOR","FUNCTION_TITLE","CPP_KEYWORDS","built_in","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","FUNCTION_DECLARATION","preprocessor","strings","cPlusPlus","kws","meta","STRONG","EMPHASIS","BACKTICK_ESCAPE","VARIABLE","STRING","NUMBER","VAR","BRACED_VAR","SUBST","HERE_DOC","QUOTE_STRING","ARITHMETIC","KNOWN_SHEBANG","FUNCTION"],"mappings":"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","file":"js/app@9c50beac.07c2c30ca1d2de2820c7.js","sourcesContent":["function deepFreeze(obj) {\n    if (obj instanceof Map) {\n        obj.clear = obj.delete = obj.set = function () {\n            throw new Error('map is read-only');\n        };\n    } else if (obj instanceof Set) {\n        obj.add = obj.clear = obj.delete = function () {\n            throw new Error('set is read-only');\n        };\n    }\n\n    // Freeze self\n    Object.freeze(obj);\n\n    Object.getOwnPropertyNames(obj).forEach(function (name) {\n        var prop = obj[name];\n\n        // Freeze prop if it is an object\n        if (typeof prop == 'object' && !Object.isFrozen(prop)) {\n            deepFreeze(prop);\n        }\n    });\n\n    return obj;\n}\n\nvar deepFreezeEs6 = deepFreeze;\nvar _default = deepFreeze;\ndeepFreezeEs6.default = _default;\n\nclass Response {\n  /**\n   * @param {CompiledMode} mode\n   */\n  constructor(mode) {\n    // eslint-disable-next-line no-undefined\n    if (mode.data === undefined) mode.data = {};\n\n    this.data = mode.data;\n  }\n\n  ignoreMatch() {\n    this.ignore = true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction escapeHTML(value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */\n\n/** @typedef {{kind?: string, sublanguage?: boolean}} Node */\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\n/** */\n\nconst SPAN_CLOSE = '</span>';\n\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */\nconst emitsWrappingTags = (node) => {\n  return !!node.kind;\n};\n\n/** @type {Renderer} */\nclass HTMLRenderer {\n  /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */\n  constructor(parseTree, options) {\n    this.buffer = \"\";\n    this.classPrefix = options.classPrefix;\n    parseTree.walk(this);\n  }\n\n  /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */\n  addText(text) {\n    this.buffer += escapeHTML(text);\n  }\n\n  /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */\n  openNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    let className = node.kind;\n    if (!node.sublanguage) {\n      className = `${this.classPrefix}${className}`;\n    }\n    this.span(className);\n  }\n\n  /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */\n  closeNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    this.buffer += SPAN_CLOSE;\n  }\n\n  /**\n   * returns the accumulated buffer\n  */\n  value() {\n    return this.buffer;\n  }\n\n  // helpers\n\n  /**\n   * Builds a span element\n   *\n   * @param {string} className */\n  span(className) {\n    this.buffer += `<span class=\"${className}\">`;\n  }\n}\n\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} | string} Node */\n/** @typedef {{kind?: string, sublanguage?: boolean, children: Node[]} } DataNode */\n/**  */\n\nclass TokenTree {\n  constructor() {\n    /** @type DataNode */\n    this.rootNode = { children: [] };\n    this.stack = [this.rootNode];\n  }\n\n  get top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  get root() { return this.rootNode; }\n\n  /** @param {Node} node */\n  add(node) {\n    this.top.children.push(node);\n  }\n\n  /** @param {string} kind */\n  openNode(kind) {\n    /** @type Node */\n    const node = { kind, children: [] };\n    this.add(node);\n    this.stack.push(node);\n  }\n\n  closeNode() {\n    if (this.stack.length > 1) {\n      return this.stack.pop();\n    }\n    // eslint-disable-next-line no-undefined\n    return undefined;\n  }\n\n  closeAllNodes() {\n    while (this.closeNode());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.rootNode, null, 4);\n  }\n\n  /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */\n  walk(builder) {\n    // this does not\n    return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n  }\n\n  /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */\n  static _walk(builder, node) {\n    if (typeof node === \"string\") {\n      builder.addText(node);\n    } else if (node.children) {\n      builder.openNode(node);\n      node.children.forEach((child) => this._walk(builder, child));\n      builder.closeNode(node);\n    }\n    return builder;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  static _collapse(node) {\n    if (typeof node === \"string\") return;\n    if (!node.children) return;\n\n    if (node.children.every(el => typeof el === \"string\")) {\n      // node.text = node.children.join(\"\");\n      // delete node.children;\n      node.children = [node.children.join(\"\")];\n    } else {\n      node.children.forEach((child) => {\n        TokenTree._collapse(child);\n      });\n    }\n  }\n}\n\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addKeyword(text, kind)\n  - addText(text)\n  - addSublanguage(emitter, subLanguageName)\n  - finalize()\n  - openNode(kind)\n  - closeNode()\n  - closeAllNodes()\n  - toHTML()\n\n*/\n\n/**\n * @implements {Emitter}\n */\nclass TokenTreeEmitter extends TokenTree {\n  /**\n   * @param {*} options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} kind\n   */\n  addKeyword(text, kind) {\n    if (text === \"\") { return; }\n\n    this.openNode(kind);\n    this.addText(text);\n    this.closeNode();\n  }\n\n  /**\n   * @param {string} text\n   */\n  addText(text) {\n    if (text === \"\") { return; }\n\n    this.add(text);\n  }\n\n  /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */\n  addSublanguage(emitter, name) {\n    /** @type DataNode */\n    const node = emitter.root;\n    node.kind = name;\n    node.sublanguage = true;\n    this.add(node);\n  }\n\n  toHTML() {\n    const renderer = new HTMLRenderer(this, this.options);\n    return renderer.value();\n  }\n\n  finalize() {\n    return true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\nfunction escape(value) {\n  return new RegExp(value.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'm');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/**\n * @param {RegExp} re\n * @returns {number}\n */\nfunction countMatchGroups(re) {\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\n}\n\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */\nfunction startsWith(re, lexeme) {\n  const match = re && re.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {string} separator\n * @returns {string}\n */\nfunction join(regexps, separator = \"|\") {\n  // backreferenceRe matches an open parenthesis or backreference. To avoid\n  // an incorrect parse, it additionally matches the following:\n  // - [...] elements, where the meaning of parentheses and escapes change\n  // - other escape sequences, so we do not misparse escape sequences as\n  //   interesting elements\n  // - non-matching or lookahead parentheses, which do not capture. These\n  //   follow the '(' with a '?'.\n  const backreferenceRe = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n  let numCaptures = 0;\n  let ret = '';\n  for (let i = 0; i < regexps.length; i++) {\n    numCaptures += 1;\n    const offset = numCaptures;\n    let re = source(regexps[i]);\n    if (i > 0) {\n      ret += separator;\n    }\n    ret += \"(\";\n    while (re.length > 0) {\n      const match = backreferenceRe.exec(re);\n      if (match == null) {\n        ret += re;\n        break;\n      }\n      ret += re.substring(0, match.index);\n      re = re.substring(match.index + match[0].length);\n      if (match[0][0] === '\\\\' && match[1]) {\n        // Adjust the backreference.\n        ret += '\\\\' + String(Number(match[1]) + offset);\n      } else {\n        ret += match[0];\n        if (match[0] === '(') {\n          numCaptures++;\n        }\n      }\n    }\n    ret += \")\";\n  }\n  return ret;\n}\n\n// Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/\nconst SHEBANG = (opts = {}) => {\n  const beginShebang = /^#![ ]*\\//;\n  if (opts.binary) {\n    opts.begin = concat(\n      beginShebang,\n      /.*\\b/,\n      opts.binary,\n      /\\b.*/);\n  }\n  return inherit({\n    className: 'meta',\n    begin: beginShebang,\n    end: /$/,\n    relevance: 0,\n    /** @type {ModeCallback} */\n    \"on:begin\": (m, resp) => {\n      if (m.index !== 0) resp.ignoreMatch();\n    }\n  }, opts);\n};\n\n// Common modes\nconst BACKSLASH_ESCAPE = {\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n};\nconst APOS_STRING_MODE = {\n  className: 'string',\n  begin: '\\'',\n  end: '\\'',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst QUOTE_STRING_MODE = {\n  className: 'string',\n  begin: '\"',\n  end: '\"',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst PHRASAL_WORDS_MODE = {\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit(\n    {\n      className: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push(PHRASAL_WORDS_MODE);\n  mode.contains.push({\n    className: 'doctag',\n    begin: '(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):',\n    relevance: 0\n  });\n  return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\nconst NUMBER_MODE = {\n  className: 'number',\n  begin: NUMBER_RE,\n  relevance: 0\n};\nconst C_NUMBER_MODE = {\n  className: 'number',\n  begin: C_NUMBER_RE,\n  relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n  className: 'number',\n  begin: BINARY_NUMBER_RE,\n  relevance: 0\n};\nconst CSS_NUMBER_MODE = {\n  className: 'number',\n  begin: NUMBER_RE + '(' +\n    '%|em|ex|ch|rem' +\n    '|vw|vh|vmin|vmax' +\n    '|cm|mm|in|pt|pc|px' +\n    '|deg|grad|rad|turn' +\n    '|s|ms' +\n    '|Hz|kHz' +\n    '|dpi|dpcm|dppx' +\n    ')?',\n  relevance: 0\n};\nconst REGEXP_MODE = {\n  // this outer rule makes sure we actually have a WHOLE regex and not simply\n  // an expression such as:\n  //\n  //     3 / something\n  //\n  // (which will then blow up when regex's `illegal` sees the newline)\n  begin: /(?=\\/[^/\\n]*\\/)/,\n  contains: [{\n    className: 'regexp',\n    begin: /\\//,\n    end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/,\n        end: /\\]/,\n        relevance: 0,\n        contains: [BACKSLASH_ESCAPE]\n      }\n    ]\n  }]\n};\nconst TITLE_MODE = {\n  className: 'title',\n  begin: IDENT_RE,\n  relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n  className: 'title',\n  begin: UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\nconst METHOD_GUARD = {\n  // excludes method names from keyword processing\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\n\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */\nconst END_SAME_AS_BEGIN = function(mode) {\n  return Object.assign(mode,\n    {\n      /** @type {ModeCallback} */\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\n      /** @type {ModeCallback} */\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\n    });\n};\n\nvar MODES = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n    IDENT_RE: IDENT_RE,\n    UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n    NUMBER_RE: NUMBER_RE,\n    C_NUMBER_RE: C_NUMBER_RE,\n    BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n    RE_STARTERS_RE: RE_STARTERS_RE,\n    SHEBANG: SHEBANG,\n    BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n    APOS_STRING_MODE: APOS_STRING_MODE,\n    QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n    PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n    COMMENT: COMMENT,\n    C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n    C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n    HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n    NUMBER_MODE: NUMBER_MODE,\n    C_NUMBER_MODE: C_NUMBER_MODE,\n    BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n    CSS_NUMBER_MODE: CSS_NUMBER_MODE,\n    REGEXP_MODE: REGEXP_MODE,\n    TITLE_MODE: TITLE_MODE,\n    UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,\n    METHOD_GUARD: METHOD_GUARD,\n    END_SAME_AS_BEGIN: END_SAME_AS_BEGIN\n});\n\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n\n// ------\n\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */\nfunction skipIfhasPrecedingDot(match, response) {\n  const before = match.input[match.index - 1];\n  if (before === \".\") {\n    response.ignoreMatch();\n  }\n}\n\n\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */\nfunction beginKeywords(mode, parent) {\n  if (!parent) return;\n  if (!mode.beginKeywords) return;\n\n  // for languages with keywords that include non-word characters checking for\n  // a word boundary is not sufficient, so instead we check for a word boundary\n  // or whitespace - this does no harm in any case since our keyword engine\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\n  // first\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\n  mode.__beforeBegin = skipIfhasPrecedingDot;\n  mode.keywords = mode.keywords || mode.beginKeywords;\n  delete mode.beginKeywords;\n\n  // prevents double relevance, the keywords themselves provide\n  // relevance, the mode doesn't need to double it\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 0;\n}\n\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */\nfunction compileIllegal(mode, _parent) {\n  if (!Array.isArray(mode.illegal)) return;\n\n  mode.illegal = either(...mode.illegal);\n}\n\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */\nfunction compileMatch(mode, _parent) {\n  if (!mode.match) return;\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n\n  mode.begin = mode.match;\n  delete mode.match;\n}\n\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */\nfunction compileRelevance(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 1;\n}\n\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n  'of',\n  'and',\n  'for',\n  'in',\n  'not',\n  'or',\n  'if',\n  'then',\n  'parent', // common variable name\n  'list', // common variable name\n  'value' // common variable name\n];\n\nconst DEFAULT_KEYWORD_CLASSNAME = \"keyword\";\n\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */\nfunction compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {\n  /** @type KeywordDict */\n  const compiledKeywords = {};\n\n  // input can be a string of keywords, an array of keywords, or a object with\n  // named keys representing className (which can then point to a string or array)\n  if (typeof rawKeywords === 'string') {\n    compileList(className, rawKeywords.split(\" \"));\n  } else if (Array.isArray(rawKeywords)) {\n    compileList(className, rawKeywords);\n  } else {\n    Object.keys(rawKeywords).forEach(function(className) {\n      // collapse all our objects back into the parent object\n      Object.assign(\n        compiledKeywords,\n        compileKeywords(rawKeywords[className], caseInsensitive, className)\n      );\n    });\n  }\n  return compiledKeywords;\n\n  // ---\n\n  /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} className\n   * @param {Array<string>} keywordList\n   */\n  function compileList(className, keywordList) {\n    if (caseInsensitive) {\n      keywordList = keywordList.map(x => x.toLowerCase());\n    }\n    keywordList.forEach(function(keyword) {\n      const pair = keyword.split('|');\n      compiledKeywords[pair[0]] = [className, scoreForKeyword(pair[0], pair[1])];\n    });\n  }\n}\n\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */\nfunction scoreForKeyword(keyword, providedScore) {\n  // manual scores always win over common keywords\n  // so you can force a score of 1 if you really insist\n  if (providedScore) {\n    return Number(providedScore);\n  }\n\n  return commonKeyword(keyword) ? 0 : 1;\n}\n\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */\nfunction commonKeyword(keyword) {\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n\n// compilation\n\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @param {{plugins: HLJSPlugin[]}} opts\n * @returns {CompiledLanguage}\n */\nfunction compileLanguage(language, { plugins }) {\n  /**\n   * Builds a regex with the case sensativility of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n    );\n  }\n\n  /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */\n  class MultiRegex {\n    constructor() {\n      this.matchIndexes = {};\n      // @ts-ignore\n      this.regexes = [];\n      this.matchAt = 1;\n      this.position = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      opts.position = this.position++;\n      // @ts-ignore\n      this.matchIndexes[this.matchAt] = opts;\n      this.regexes.push([opts, re]);\n      this.matchAt += countMatchGroups(re) + 1;\n    }\n\n    compile() {\n      if (this.regexes.length === 0) {\n        // avoids the need to check length every time exec is called\n        // @ts-ignore\n        this.exec = () => null;\n      }\n      const terminators = this.regexes.map(el => el[1]);\n      this.matcherRe = langRe(join(terminators), true);\n      this.lastIndex = 0;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      this.matcherRe.lastIndex = this.lastIndex;\n      const match = this.matcherRe.exec(s);\n      if (!match) { return null; }\n\n      // eslint-disable-next-line no-undefined\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\n      // @ts-ignore\n      const matchData = this.matchIndexes[i];\n      // trim off any earlier non-relevant match groups (ie, the other regex\n      // match groups that make up the multi-matcher)\n      match.splice(0, i);\n\n      return Object.assign(match, matchData);\n    }\n  }\n\n  /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */\n  class ResumableMultiRegex {\n    constructor() {\n      // @ts-ignore\n      this.rules = [];\n      // @ts-ignore\n      this.multiRegexes = [];\n      this.count = 0;\n\n      this.lastIndex = 0;\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    getMatcher(index) {\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\n\n      const matcher = new MultiRegex();\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\n      matcher.compile();\n      this.multiRegexes[index] = matcher;\n      return matcher;\n    }\n\n    resumingScanAtSamePosition() {\n      return this.regexIndex !== 0;\n    }\n\n    considerAll() {\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      this.rules.push([re, opts]);\n      if (opts.type === \"begin\") this.count++;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      const m = this.getMatcher(this.regexIndex);\n      m.lastIndex = this.lastIndex;\n      let result = m.exec(s);\n\n      // The following is because we have no easy way to say \"resume scanning at the\n      // existing position but also skip the current rule ONLY\". What happens is\n      // all prior rules are also skipped which can result in matching the wrong\n      // thing. Example of matching \"booger\":\n\n      // our matcher is [string, \"booger\", number]\n      //\n      // ....booger....\n\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\n      // was the first match), a simple resume would scan ahead who knows how\n      // far looking only for \"number\", ignoring potential string matches (or\n      // future \"booger\" matches that might be valid.)\n\n      // So what we do: We execute two matchers, one resuming at the same\n      // position, but the second full matcher starting at the position after:\n\n      //     /--- resume first regex match here (for [number])\n      //     |/---- full match here for [string, \"booger\", number]\n      //     vv\n      // ....booger....\n\n      // Which ever results in a match first is then used. So this 3-4 step\n      // process essentially allows us to say \"match at this position, excluding\n      // a prior rule that was ignored\".\n      //\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n      // 2. Resume matching for [number]\n      // 3. Match at index + 1 for [string, \"booger\", number]\n      // 4. If #2 and #3 result in matches, which came first?\n      if (this.resumingScanAtSamePosition()) {\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\n          const m2 = this.getMatcher(0);\n          m2.lastIndex = this.lastIndex + 1;\n          result = m2.exec(s);\n        }\n      }\n\n      if (result) {\n        this.regexIndex += result.position + 1;\n        if (this.regexIndex === this.count) {\n          // wrap-around to considering all matches again\n          this.considerAll();\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */\n  function buildModeRegex(mode) {\n    const mm = new ResumableMultiRegex();\n\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\n\n    if (mode.terminatorEnd) {\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\n    }\n    if (mode.illegal) {\n      mm.addRule(mode.illegal, { type: \"illegal\" });\n    }\n\n    return mm;\n  }\n\n  /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */\n\n  /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */\n  function compileMode(mode, parent) {\n    const cmode = /** @type CompiledMode */ (mode);\n    if (mode.compiled) return cmode;\n\n    [\n      // do this early so compiler extensions generally don't have to worry about\n      // the distinction between match/begin\n      compileMatch\n    ].forEach(ext => ext(mode, parent));\n\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\n\n    // __beforeBegin is considered private API, internal use only\n    mode.__beforeBegin = null;\n\n    [\n      beginKeywords,\n      // do this later so compiler extensions that come earlier have access to the\n      // raw array if they wanted to perhaps manipulate it, etc.\n      compileIllegal,\n      // default to 1 relevance if not specified\n      compileRelevance\n    ].forEach(ext => ext(mode, parent));\n\n    mode.compiled = true;\n\n    let keywordPattern = null;\n    if (typeof mode.keywords === \"object\") {\n      keywordPattern = mode.keywords.$pattern;\n      delete mode.keywords.$pattern;\n    }\n\n    if (mode.keywords) {\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n    }\n\n    // both are not allowed\n    if (mode.lexemes && keywordPattern) {\n      throw new Error(\"ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) \");\n    }\n\n    // `mode.lexemes` was the old standard before we added and now recommend\n    // using `keywords.$pattern` to pass the keyword pattern\n    keywordPattern = keywordPattern || mode.lexemes || /\\w+/;\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\n\n    if (parent) {\n      if (!mode.begin) mode.begin = /\\B|\\b/;\n      cmode.beginRe = langRe(mode.begin);\n      if (mode.endSameAsBegin) mode.end = mode.begin;\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n      if (mode.end) cmode.endRe = langRe(mode.end);\n      cmode.terminatorEnd = source(mode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\n    if (!mode.contains) mode.contains = [];\n\n    mode.contains = [].concat(...mode.contains.map(function(c) {\n      return expandOrCloneMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    cmode.matcher = buildModeRegex(cmode);\n    return cmode;\n  }\n\n  if (!language.compilerExtensions) language.compilerExtensions = [];\n\n  // self is not valid at the top-level\n  if (language.contains && language.contains.includes('self')) {\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n  }\n\n  // we need a null object, which inherit will guarantee\n  language.classNameAliases = inherit(language.classNameAliases || {});\n\n  return compileMode(/** @type Mode */ (language));\n}\n\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */\nfunction dependencyOnParent(mode) {\n  if (!mode) return false;\n\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */\nfunction expandOrCloneMode(mode) {\n  if (mode.variants && !mode.cachedVariants) {\n    mode.cachedVariants = mode.variants.map(function(variant) {\n      return inherit(mode, { variants: null }, variant);\n    });\n  }\n\n  // EXPAND\n  // if we have variants then essentially \"replace\" the mode with the variants\n  // this happens in compileMode, where this function is called from\n  if (mode.cachedVariants) {\n    return mode.cachedVariants;\n  }\n\n  // CLONE\n  // if we have dependencies on parents then we need a unique\n  // instance of ourselves, so we can be reused with many\n  // different parents without issue\n  if (dependencyOnParent(mode)) {\n    return inherit(mode, { starts: mode.starts ? inherit(mode.starts) : null });\n  }\n\n  if (Object.isFrozen(mode)) {\n    return inherit(mode);\n  }\n\n  // no special dependency issues, just return ourselves\n  return mode;\n}\n\nvar version = \"10.6.0\";\n\n// @ts-nocheck\n\nfunction hasValueOrEmptyAttribute(value) {\n  return Boolean(value || value === \"\");\n}\n\nfunction BuildVuePlugin(hljs) {\n  const Component = {\n    props: [\"language\", \"code\", \"autodetect\"],\n    data: function() {\n      return {\n        detectedLanguage: \"\",\n        unknownLanguage: false\n      };\n    },\n    computed: {\n      className() {\n        if (this.unknownLanguage) return \"\";\n\n        return \"hljs \" + this.detectedLanguage;\n      },\n      highlighted() {\n        // no idea what language to use, return raw code\n        if (!this.autoDetect && !hljs.getLanguage(this.language)) {\n          console.warn(`The language \"${this.language}\" you specified could not be found.`);\n          this.unknownLanguage = true;\n          return escapeHTML(this.code);\n        }\n\n        let result = {};\n        if (this.autoDetect) {\n          result = hljs.highlightAuto(this.code);\n          this.detectedLanguage = result.language;\n        } else {\n          result = hljs.highlight(this.language, this.code, this.ignoreIllegals);\n          this.detectedLanguage = this.language;\n        }\n        return result.value;\n      },\n      autoDetect() {\n        return !this.language || hasValueOrEmptyAttribute(this.autodetect);\n      },\n      ignoreIllegals() {\n        return true;\n      }\n    },\n    // this avoids needing to use a whole Vue compilation pipeline just\n    // to build Highlight.js\n    render(createElement) {\n      return createElement(\"pre\", {}, [\n        createElement(\"code\", {\n          class: this.className,\n          domProps: { innerHTML: this.highlighted }\n        })\n      ]);\n    }\n    // template: `<pre><code :class=\"className\" v-html=\"highlighted\"></code></pre>`\n  };\n\n  const VuePlugin = {\n    install(Vue) {\n      Vue.component('highlightjs', Component);\n    }\n  };\n\n  return { Component, VuePlugin };\n}\n\n/* plugin itself */\n\n/** @type {HLJSPlugin} */\nconst mergeHTMLPlugin = {\n  \"after:highlightBlock\": ({ block, result, text }) => {\n    const originalStream = nodeStream(block);\n    if (!originalStream.length) return;\n\n    const resultNode = document.createElement('div');\n    resultNode.innerHTML = result.value;\n    result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n  }\n};\n\n/* Stream merging support functions */\n\n/**\n * @typedef Event\n * @property {'start'|'stop'} event\n * @property {number} offset\n * @property {Node} node\n */\n\n/**\n * @param {Node} node\n */\nfunction tag(node) {\n  return node.nodeName.toLowerCase();\n}\n\n/**\n * @param {Node} node\n */\nfunction nodeStream(node) {\n  /** @type Event[] */\n  const result = [];\n  (function _nodeStream(node, offset) {\n    for (let child = node.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 3) {\n        offset += child.nodeValue.length;\n      } else if (child.nodeType === 1) {\n        result.push({\n          event: 'start',\n          offset: offset,\n          node: child\n        });\n        offset = _nodeStream(child, offset);\n        // Prevent void elements from having an end tag that would actually\n        // double them in the output. There are more void elements in HTML\n        // but we list only those realistically expected in code display.\n        if (!tag(child).match(/br|hr|img|input/)) {\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: child\n          });\n        }\n      }\n    }\n    return offset;\n  })(node, 0);\n  return result;\n}\n\n/**\n * @param {any} original - the original stream\n * @param {any} highlighted - stream of the highlighted source\n * @param {string} value - the original source itself\n */\nfunction mergeStreams(original, highlighted, value) {\n  let processed = 0;\n  let result = '';\n  const nodeStack = [];\n\n  function selectStream() {\n    if (!original.length || !highlighted.length) {\n      return original.length ? original : highlighted;\n    }\n    if (original[0].offset !== highlighted[0].offset) {\n      return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n    }\n\n    /*\n    To avoid starting the stream just before it should stop the order is\n    ensured that original always starts first and closes last:\n\n    if (event1 == 'start' && event2 == 'start')\n      return original;\n    if (event1 == 'start' && event2 == 'stop')\n      return highlighted;\n    if (event1 == 'stop' && event2 == 'start')\n      return original;\n    if (event1 == 'stop' && event2 == 'stop')\n      return highlighted;\n\n    ... which is collapsed to:\n    */\n    return highlighted[0].event === 'start' ? original : highlighted;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  function open(node) {\n    /** @param {Attr} attr */\n    function attributeString(attr) {\n      return ' ' + attr.nodeName + '=\"' + escapeHTML(attr.value) + '\"';\n    }\n    // @ts-ignore\n    result += '<' + tag(node) + [].map.call(node.attributes, attributeString).join('') + '>';\n  }\n\n  /**\n   * @param {Node} node\n   */\n  function close(node) {\n    result += '</' + tag(node) + '>';\n  }\n\n  /**\n   * @param {Event} event\n   */\n  function render(event) {\n    (event.event === 'start' ? open : close)(event.node);\n  }\n\n  while (original.length || highlighted.length) {\n    let stream = selectStream();\n    result += escapeHTML(value.substring(processed, stream[0].offset));\n    processed = stream[0].offset;\n    if (stream === original) {\n      /*\n      On any opening or closing tag of the original markup we first close\n      the entire highlighted node stack, then render the original tag along\n      with all the following original tags at the same offset and then\n      reopen all the tags on the highlighted stack.\n      */\n      nodeStack.reverse().forEach(close);\n      do {\n        render(stream.splice(0, 1)[0]);\n        stream = selectStream();\n      } while (stream === original && stream.length && stream[0].offset === processed);\n      nodeStack.reverse().forEach(open);\n    } else {\n      if (stream[0].event === 'start') {\n        nodeStack.push(stream[0].node);\n      } else {\n        nodeStack.pop();\n      }\n      render(stream.splice(0, 1)[0]);\n    }\n  }\n  return result + escapeHTML(value.substr(processed));\n}\n\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/\n\n/**\n * @param {string} message\n */\nconst error = (message) => {\n  console.error(message);\n};\n\n/**\n * @param {string} message\n * @param {any} args\n */\nconst warn = (message, ...args) => {\n  console.log(`WARN: ${message}`, ...args);\n};\n\n/**\n * @param {string} version\n * @param {string} message\n */\nconst deprecated = (version, message) => {\n  console.log(`Deprecated as of ${version}. ${message}`);\n};\n\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\nconst escape$1 = escapeHTML;\nconst inherit$1 = inherit;\nconst NO_MATCH = Symbol(\"nomatch\");\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  const languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  const aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  const plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  let SAFE_MODE = true;\n  const fixMarkupRe = /(^(<[^>]+>|\\t|)+|\\n)/gm;\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  let options = {\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    let classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      const language = getLanguage(match[1]);\n      if (!language) {\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(languageName, code, ignoreIllegals, continuation) {\n    /** @type {BeforeHighlightContext} */\n    const context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    const result = context.result\n      ? context.result\n      : _highlight(context.language, context.code, ignoreIllegals, continuation);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} code - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */\n  function _highlight(languageName, code, ignoreIllegals, continuation) {\n    const codeToHighlight = code;\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {RegExpMatchArray} match - regexp match data\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, match) {\n      const matchText = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(modeBuffer);\n        return;\n      }\n\n      let lastIndex = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(modeBuffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += modeBuffer.substring(lastIndex, match.index);\n        const data = keywordData(top, match);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          relevance += keywordRelevance;\n          const cssClass = language.classNameAliases[kind] || kind;\n          emitter.addKeyword(match[0], cssClass);\n        } else {\n          buf += match[0];\n        }\n        lastIndex = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(modeBuffer);\n      }\n      buf += modeBuffer.substr(lastIndex);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (modeBuffer === \"\") return;\n      /** @type HighlightResult */\n      let result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(modeBuffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result.top);\n      } else {\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.addSublanguage(result.emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      modeBuffer = '';\n    }\n\n    /**\n     * @param {Mode} mode - new mode to start\n     */\n    function startNewMode(mode) {\n      if (mode.className) {\n        emitter.openNode(language.classNameAliases[mode.className] || mode.className);\n      }\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.ignore) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexs to potentially match here, so we move the cursor forward one\n        // space\n        modeBuffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        resumeScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      const lexeme = match[0];\n      const newMode = match.rule;\n\n      const resp = new Response(newMode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.ignore) return doIgnore(lexeme);\n      }\n\n      if (newMode && newMode.endSameAsBegin) {\n        newMode.endRe = escape(lexeme);\n      }\n\n      if (newMode.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (newMode.excludeBegin) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\n          modeBuffer = lexeme;\n        }\n      }\n      startNewMode(newMode);\n      // if (mode[\"after:begin\"]) {\n      //   let resp = new Response(mode);\n      //   mode[\"after:begin\"](match, resp);\n      // }\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      const lexeme = match[0];\n      const matchPlusRemainder = codeToHighlight.substr(match.index);\n\n      const endMode = endOfMode(top, match, matchPlusRemainder);\n      if (!endMode) { return NO_MATCH; }\n\n      const origin = top;\n      if (origin.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          modeBuffer = lexeme;\n        }\n      }\n      do {\n        if (top.className) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (endMode.starts) {\n        if (endMode.endSameAsBegin) {\n          endMode.starts.endRe = endMode.endRe;\n        }\n        startNewMode(endMode.starts);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      const list = [];\n      for (let current = top; current !== language; current = current.parent) {\n        if (current.className) {\n          list.unshift(current.className);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    let lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceeding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      const lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      modeBuffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error('0 width match regex');\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        const processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  Only one occasion now.  An end match that was\n      triggered but could not be completed.  When might this happen?  When an `endSameasBegin`\n      rule sets the end rule to a specific match.  Since the overall mode termination rule that's\n      being used to scan the text isn't recompiled that means that any match that LOOKS like\n      the end (but is not, because it is not an exact match to the beginning) will\n      end up here.  A definite end match, but when `doEndMatch` tries to \"reapply\"\n      the end rule and fails to match, we wind up here, and just silently ignore the end.\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      modeBuffer += lexeme;\n      return lexeme.length;\n    }\n\n    const language = getLanguage(languageName);\n    if (!language) {\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    const md = compileLanguage(language, { plugins });\n    let result = '';\n    /** @type {CompiledMode} */\n    let top = continuation || md;\n    /** @type Record<string,CompiledMode> */\n    const continuations = {}; // keep continuations for sub-languages\n    const emitter = new options.__emitter(options);\n    processContinuations();\n    let modeBuffer = '';\n    let relevance = 0;\n    let index = 0;\n    let iterations = 0;\n    let resumeScanAtSamePosition = false;\n\n    try {\n      top.matcher.considerAll();\n\n      for (;;) {\n        iterations++;\n        if (resumeScanAtSamePosition) {\n          // only regexes not matched previously will now be\n          // considered for a potential match\n          resumeScanAtSamePosition = false;\n        } else {\n          top.matcher.considerAll();\n        }\n        top.matcher.lastIndex = index;\n\n        const match = top.matcher.exec(codeToHighlight);\n        // console.log(\"match\", match[0], match.rule && match.rule.begin)\n\n        if (!match) break;\n\n        const beforeMatch = codeToHighlight.substring(index, match.index);\n        const processedCount = processLexeme(beforeMatch, match);\n        index = match.index + processedCount;\n      }\n      processLexeme(codeToHighlight.substr(index));\n      emitter.closeAllNodes();\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        // avoid possible breakage with v10 clients expecting\n        // this to always be an integer\n        relevance: Math.floor(relevance),\n        value: result,\n        language: languageName,\n        illegal: false,\n        emitter: emitter,\n        top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          illegal: true,\n          illegalBy: {\n            msg: err.message,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode\n          },\n          sofar: result,\n          relevance: 0,\n          value: escape$1(codeToHighlight),\n          emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          illegal: false,\n          relevance: 0,\n          value: escape$1(codeToHighlight),\n          emitter: emitter,\n          language: languageName,\n          top: top,\n          errorRaised: err\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      relevance: 0,\n      emitter: new options.__emitter(options),\n      value: escape$1(code),\n      illegal: false,\n      top: PLAINTEXT_LANGUAGE\n    };\n    result.emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    const plaintext = justTextHighlightResult(code);\n\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\n      _highlight(name, code, false)\n    );\n    results.unshift(plaintext); // plaintext is always an option\n\n    const sorted = results.sort((a, b) => {\n      // sort base on relevance\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n\n      // always award the tie to the base language\n      // ie if C++ and Arduino are tied, it's more likely to be C++\n      if (a.language && b.language) {\n        if (getLanguage(a.language).supersetOf === b.language) {\n          return 1;\n        } else if (getLanguage(b.language).supersetOf === a.language) {\n          return -1;\n        }\n      }\n\n      // otherwise say they are equal, which has the effect of sorting on\n      // relevance while preserving the original ordering - which is how ties\n      // have historically been settled, ie the language that comes first always\n      // wins in the case of a tie\n      return 0;\n    });\n\n    const [best, secondBest] = sorted;\n\n    /** @type {AutoHighlightResult} */\n    const result = best;\n    result.second_best = secondBest;\n\n    return result;\n  }\n\n  /**\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n    @param {string} html\n    @returns {string}\n  */\n  function fixMarkup(html) {\n    if (!(options.tabReplace || options.useBR)) {\n      return html;\n    }\n\n    return html.replace(fixMarkupRe, match => {\n      if (match === '\\n') {\n        return options.useBR ? '<br>' : match;\n      } else if (options.tabReplace) {\n        return match.replace(/\\t/g, options.tabReplace);\n      }\n      return match;\n    });\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function updateClassName(element, currentLang, resultLang) {\n    const language = currentLang ? aliases[currentLang] : resultLang;\n\n    element.classList.add(\"hljs\");\n    if (language) element.classList.add(language);\n  }\n\n  /** @type {HLJSPlugin} */\n  const brPlugin = {\n    \"before:highlightBlock\": ({ block }) => {\n      if (options.useBR) {\n        block.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ /]*>/g, '\\n');\n      }\n    },\n    \"after:highlightBlock\": ({ result }) => {\n      if (options.useBR) {\n        result.value = result.value.replace(/\\n/g, \"<br>\");\n      }\n    }\n  };\n\n  const TAB_REPLACE_RE = /^(<[^>]+>|\\t)+/gm;\n  /** @type {HLJSPlugin} */\n  const tabReplacePlugin = {\n    \"after:highlightBlock\": ({ result }) => {\n      if (options.tabReplace) {\n        result.value = result.value.replace(TAB_REPLACE_RE, (m) =>\n          m.replace(/\\t/g, options.tabReplace)\n        );\n      }\n    }\n  };\n\n  /**\n   * Applies highlighting to a DOM node containing code. Accepts a DOM node and\n   * two optional parameters for fixMarkup.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightBlock(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightBlock\",\n      { block: element, language: language });\n\n    node = element;\n    const text = node.textContent;\n    const result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    fire(\"after:highlightBlock\", { block: element, result, text });\n\n    element.innerHTML = result.value;\n    updateClassName(element, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relavance: result.relevance\n    };\n    if (result.second_best) {\n      element.second_best = {\n        language: result.second_best.language,\n        // TODO: remove with version 11.0\n        re: result.second_best.relevance,\n        relavance: result.second_best.relevance\n      };\n    }\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */\n  function configure(userOptions) {\n    if (userOptions.useBR) {\n      deprecated(\"10.3.0\", \"'useBR' will be removed entirely in v11.0\");\n      deprecated(\"10.3.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2559\");\n    }\n    options = inherit$1(options, userOptions);\n  }\n\n  /**\n   * Highlights to all <pre><code> blocks on a page\n   *\n   * @type {Function & {called?: boolean}}\n   */\n  // TODO: remove v12, deprecated\n  const initHighlighting = () => {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n\n    deprecated(\"10.6.0\", \"initHighlighting() is deprecated.  Use highlightAll() instead.\");\n\n    const blocks = document.querySelectorAll('pre code');\n    blocks.forEach(highlightBlock);\n  };\n\n  // Higlights all when DOMContentLoaded fires\n  // TODO: remove v12, deprecated\n  function initHighlightingOnLoad() {\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.\");\n    wantsHighlight = true;\n  }\n\n  let wantsHighlight = false;\n  let domLoaded = false;\n\n  /**\n   * auto-highlights all pre>code elements on the page\n   */\n  function highlightAll() {\n    // if we are called too early in the loading process\n    if (!domLoaded) { wantsHighlight = true; return; }\n\n    const blocks = document.querySelectorAll('pre code');\n    blocks.forEach(highlightBlock);\n  }\n\n  function boot() {\n    domLoaded = true;\n    // if a highlight was requested before DOM was loaded, do now\n    if (wantsHighlight) highlightAll();\n  }\n\n  // make sure we are in the browser environment\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('DOMContentLoaded', boot, false);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    let lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error$1) {\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n    intended usage: When one language truly requires another\n\n    Unlike `getLanguage`, this will throw when the requested language\n    is not available.\n\n    @param {string} name - name of the language to fetch/require\n    @returns {Language | never}\n  */\n  function requireLanguage(name) {\n    deprecated(\"10.4.0\", \"requireLanguage will be removed entirely in v11.\");\n    deprecated(\"10.4.0\", \"Please see https://github.com/highlightjs/highlight.js/pull/2844\");\n\n    const lang = getLanguage(name);\n    if (lang) { return lang; }\n\n    const err = new Error('The \\'{}\\' language is required, but not loaded.'.replace('{}', name));\n    throw err;\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    const lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    plugins.push(plugin);\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    const cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /**\n  Note: fixMarkup is deprecated and will be removed entirely in v11\n\n  @param {string} arg\n  @returns {string}\n  */\n  function deprecateFixMarkup(arg) {\n    deprecated(\"10.2.0\", \"fixMarkup will be removed entirely in v11.0\");\n    deprecated(\"10.2.0\", \"Please see https://github.com/highlightjs/highlight.js/issues/2534\");\n\n    return fixMarkup(arg);\n  }\n\n  /* Interface definition */\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    highlightAll,\n    fixMarkup: deprecateFixMarkup,\n    highlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    requireLanguage,\n    autoDetection,\n    inherit: inherit$1,\n    addPlugin,\n    // plugins for frameworks\n    vuePlugin: BuildVuePlugin(hljs).VuePlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = version;\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreezeEs6(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexs into our main object\n  Object.assign(hljs, MODES);\n\n  // built-in plugins, likely to be moved out of core in the future\n  hljs.addPlugin(brPlugin); // slated to be removed in v11\n  hljs.addPlugin(mergeHTMLPlugin);\n  hljs.addPlugin(tabReplacePlugin);\n  return hljs;\n};\n\n// export an \"instance\" of the highlighter\nvar highlight = HLJS({});\n\nmodule.exports = highlight;\n","/*\nLanguage: Apache config\nAuthor: Ruslan Keba <rukeba@gmail.com>\nContributors: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: https://httpd.apache.org\nDescription: language definition for Apache configuration files (httpd.conf & .htaccess)\nCategory: common, config\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction apache(hljs) {\n  const NUMBER_REF = {\n    className: 'number',\n    begin: /[$%]\\d+/\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: /\\d+/\n  };\n  const IP_ADDRESS = {\n    className: \"number\",\n    begin: /\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?/\n  };\n  const PORT_NUMBER = {\n    className: \"number\",\n    begin: /:\\d{1,5}/\n  };\n  return {\n    name: 'Apache config',\n    aliases: [ 'apacheconf' ],\n    case_insensitive: true,\n    contains: [\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'section',\n        begin: /<\\/?/,\n        end: />/,\n        contains: [\n          IP_ADDRESS,\n          PORT_NUMBER,\n          // low relevance prevents us from claming XML/HTML where this rule would\n          // match strings inside of XML tags\n          hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })\n        ]\n      },\n      {\n        className: 'attribute',\n        begin: /\\w+/,\n        relevance: 0,\n        // keywords aren’t needed for highlighting per se, they only boost relevance\n        // for a very generally defined mode (starts with a word, ends with line-end\n        keywords: {\n          nomarkup:\n            'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +\n            'sethandler errordocument loadmodule options header listen serverroot ' +\n            'servername'\n        },\n        starts: {\n          end: /$/,\n          relevance: 0,\n          keywords: { literal: 'on off all deny allow' },\n          contains: [\n            {\n              className: 'meta',\n              begin: /\\s\\[/,\n              end: /\\]$/\n            },\n            {\n              className: 'variable',\n              begin: /[\\$%]\\{/,\n              end: /\\}/,\n              contains: [\n                'self',\n                NUMBER_REF\n              ]\n            },\n            IP_ADDRESS,\n            NUMBER,\n            hljs.QUOTE_STRING_MODE\n          ]\n        }\n      }\n    ],\n    illegal: /\\S/\n  };\n}\n\nmodule.exports = apache;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/,\n        end: /$/,\n        illegal: '\\\\n'\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\n/*\nLanguage: Arduino\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\nDescription: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.\nWebsite: https://www.arduino.cc\n*/\n\n/** @type LanguageFn */\nfunction arduino(hljs) {\n  const ARDUINO_KW = {\n    keyword:\n      'boolean byte word String',\n    built_in:\n      'setup loop ' +\n      'KeyboardController MouseController SoftwareSerial ' +\n      'EthernetServer EthernetClient LiquidCrystal ' +\n      'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +\n      'HttpClient RobotMotor WiFiClient GSMScanner ' +\n      'FileSystem Scheduler GSMServer YunClient YunServer ' +\n      'IPAddress GSMClient GSMModem Keyboard Ethernet ' +\n      'Console GSMBand Esplora Stepper Process ' +\n      'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +\n      'Client Server GSMPIN FileIO Bridge Serial ' +\n      'EEPROM Stream Mouse Audio Servo File Task ' +\n      'GPRS WiFi Wire TFT GSM SPI SD ' +\n      'runShellCommandAsynchronously analogWriteResolution ' +\n      'retrieveCallingNumber printFirmwareVersion ' +\n      'analogReadResolution sendDigitalPortPair ' +\n      'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +\n      'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +\n      'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +\n      'beginTransmission getSignalStrength runAsynchronously ' +\n      'getAsynchronously listenOnLocalhost getCurrentCarrier ' +\n      'readAccelerometer messageAvailable sendDigitalPorts ' +\n      'lineFollowConfig countryNameWrite runShellCommand ' +\n      'readStringUntil rewindDirectory readTemperature ' +\n      'setClockDivider readLightSensor endTransmission ' +\n      'analogReference detachInterrupt countryNameRead ' +\n      'attachInterrupt encryptionType readBytesUntil ' +\n      'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +\n      'userNameWrite readJoystickY readJoystickX mouseReleased ' +\n      'openNextFile scanNetworks noInterrupts digitalWrite ' +\n      'beginSpeaker mousePressed isActionDone mouseDragged ' +\n      'displayLogos noAutoscroll addParameter remoteNumber ' +\n      'getModifiers keyboardRead userNameRead waitContinue ' +\n      'processInput parseCommand printVersion readNetworks ' +\n      'writeMessage blinkVersion cityNameRead readMessage ' +\n      'setDataMode parsePacket isListening setBitOrder ' +\n      'beginPacket isDirectory motorsWrite drawCompass ' +\n      'digitalRead clearScreen serialEvent rightToLeft ' +\n      'setTextSize leftToRight requestFrom keyReleased ' +\n      'compassRead analogWrite interrupts WiFiServer ' +\n      'disconnect playMelody parseFloat autoscroll ' +\n      'getPINUsed setPINUsed setTimeout sendAnalog ' +\n      'readSlider analogRead beginWrite createChar ' +\n      'motorsStop keyPressed tempoWrite readButton ' +\n      'subnetMask debugPrint macAddress writeGreen ' +\n      'randomSeed attachGPRS readString sendString ' +\n      'remotePort releaseAll mouseMoved background ' +\n      'getXChange getYChange answerCall getResult ' +\n      'voiceCall endPacket constrain getSocket writeJSON ' +\n      'getButton available connected findUntil readBytes ' +\n      'exitValue readGreen writeBlue startLoop IPAddress ' +\n      'isPressed sendSysex pauseMode gatewayIP setCursor ' +\n      'getOemKey tuneWrite noDisplay loadImage switchPIN ' +\n      'onRequest onReceive changePIN playFile noBuffer ' +\n      'parseInt overflow checkPIN knobRead beginTFT ' +\n      'bitClear updateIR bitWrite position writeRGB ' +\n      'highByte writeRed setSpeed readBlue noStroke ' +\n      'remoteIP transfer shutdown hangCall beginSMS ' +\n      'endWrite attached maintain noCursor checkReg ' +\n      'checkPUK shiftOut isValid shiftIn pulseIn ' +\n      'connect println localIP pinMode getIMEI ' +\n      'display noBlink process getBand running beginSD ' +\n      'drawBMP lowByte setBand release bitRead prepare ' +\n      'pointTo readRed setMode noFill remove listen ' +\n      'stroke detach attach noTone exists buffer ' +\n      'height bitSet circle config cursor random ' +\n      'IRread setDNS endSMS getKey micros ' +\n      'millis begin print write ready flush width ' +\n      'isPIN blink clear press mkdir rmdir close ' +\n      'point yield image BSSID click delay ' +\n      'read text move peek beep rect line open ' +\n      'seek fill size turn stop home find ' +\n      'step tone sqrt RSSI SSID ' +\n      'end bit tan cos sin pow map abs max ' +\n      'min get run put',\n    literal:\n      'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +\n      'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +\n      'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +\n      'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +\n      'DEFAULT OUTPUT INPUT HIGH LOW'\n  };\n\n  const ARDUINO = cPlusPlus(hljs);\n\n  const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);\n\n  kws.keyword += ' ' + ARDUINO_KW.keyword;\n  kws.literal += ' ' + ARDUINO_KW.literal;\n  kws.built_in += ' ' + ARDUINO_KW.built_in;\n\n  ARDUINO.name = 'Arduino';\n  ARDUINO.aliases = ['ino'];\n  ARDUINO.supersetOf = \"cpp\";\n\n  return ARDUINO;\n}\n\nmodule.exports = arduino;\n","/*\nLanguage: ARM Assembly\nAuthor: Dan Panzarella <alsoelp@gmail.com>\nDescription: ARM Assembly including Thumb and Thumb2 instructions\nCategory: assembler\n*/\n\n/** @type LanguageFn */\nfunction armasm(hljs) {\n  // local labels: %?[FB]?[AT]?\\d{1,2}\\w+\n\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT('^[ \\\\t]*(?=#)', '$', {\n        relevance: 0,\n        excludeBegin: true\n      }),\n      hljs.COMMENT('[;@]', '$', {\n        relevance: 0\n      }),\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  return {\n    name: 'ARM Assembly',\n    case_insensitive: true,\n    aliases: ['arm'],\n    keywords: {\n      $pattern: '\\\\.?' + hljs.IDENT_RE,\n      meta:\n        // GNU preprocs\n        '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ' +\n        // ARM directives\n        'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',\n      built_in:\n        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ' + // standard registers\n        'pc lr sp ip sl sb fp ' + // typical regs plus backward compatibility\n        'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 ' + // more regs and fp\n        'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 ' + // coprocessor regs\n        'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 ' + // more coproc\n        'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 ' + // advanced SIMD NEON regs\n\n        // program status registers\n        'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf ' +\n        'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf ' +\n\n        // NEON and VFP registers\n        's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 ' +\n        's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 ' +\n        'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 ' +\n        'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +\n\n        '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'\n    },\n    contains: [\n      {\n        className: 'keyword',\n        begin: '\\\\b(' + // mnemonics\n            'adc|' +\n            '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|' +\n            'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|' +\n            'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|' +\n            'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|' +\n            'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|' +\n            'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|' +\n            'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|' +\n            'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|' +\n            'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|' +\n            'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|' +\n            '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|' +\n            'wfe|wfi|yield' +\n        ')' +\n        '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?' + // condition codes\n        '[sptrx]?' + // legal postfixes\n        '(?=\\\\s)' // followed by space\n      },\n      COMMENT,\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'',\n        end: '[^\\\\\\\\]\\'',\n        relevance: 0\n      },\n      {\n        className: 'title',\n        begin: '\\\\|',\n        end: '\\\\|',\n        illegal: '\\\\n',\n        relevance: 0\n      },\n      {\n        className: 'number',\n        variants: [\n          { // hex\n            begin: '[#$=]?0x[0-9a-f]+'\n          },\n          { // bin\n            begin: '[#$=]?0b[01]+'\n          },\n          { // literal\n            begin: '[#$=]\\\\d+'\n          },\n          { // bare number\n            begin: '\\\\b\\\\d+'\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'symbol',\n        variants: [\n          { // GNU ARM syntax\n            begin: '^[ \\\\t]*[a-z_\\\\.\\\\$][a-z0-9_\\\\.\\\\$]+:'\n          },\n          { // ARM syntax\n            begin: '^[a-z_\\\\.\\\\$][a-z0-9_\\\\.\\\\$]+'\n          },\n          { // label reference\n            begin: '[=#]\\\\w+'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n}\n\nmodule.exports = armasm;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: AsciiDoc\nRequires: xml.js\nAuthor: Dan Allen <dan.j.allen@gmail.com>\nWebsite: http://asciidoc.org\nDescription: A semantic, text-based document format that can be exported to HTML, DocBook and other backends.\nCategory: markup\n*/\n\n/** @type LanguageFn */\nfunction asciidoc(hljs) {\n  const HORIZONTAL_RULE = {\n    begin: '^\\'{3,}[ \\\\t]*$',\n    relevance: 10\n  };\n  const ESCAPED_FORMATTING = [\n    // escaped constrained formatting marks (i.e., \\* \\_ or \\`)\n    {\n      begin: /\\\\[*_`]/\n    },\n    // escaped unconstrained formatting marks (i.e., \\\\** \\\\__ or \\\\``)\n    // must ignore until the next formatting marks\n    // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...\n    {\n      begin: /\\\\\\\\\\*{2}[^\\n]*?\\*{2}/\n    },\n    {\n      begin: /\\\\\\\\_{2}[^\\n]*_{2}/\n    },\n    {\n      begin: /\\\\\\\\`{2}[^\\n]*`{2}/\n    },\n    // guard: constrained formatting mark may not be preceded by \":\", \";\" or\n    // \"}\". match these so the constrained rule doesn't see them\n    {\n      begin: /[:;}][*_`](?![*_`])/\n    }\n  ];\n  const STRONG = [\n    // inline unconstrained strong (single line)\n    {\n      className: 'strong',\n      begin: /\\*{2}([^\\n]+?)\\*{2}/\n    },\n    // inline unconstrained strong (multi-line)\n    {\n      className: 'strong',\n      begin: concat(\n        /\\*\\*/,\n        /((\\*(?!\\*)|\\\\[^\\n]|[^*\\n\\\\])+\\n)+/,\n        /(\\*(?!\\*)|\\\\[^\\n]|[^*\\n\\\\])*/,\n        /\\*\\*/\n      ),\n      relevance: 0\n    },\n    // inline constrained strong (single line)\n    {\n      className: 'strong',\n      // must not precede or follow a word character\n      begin: /\\B\\*(\\S|\\S[^\\n]*?\\S)\\*(?!\\w)/\n    },\n    // inline constrained strong (multi-line)\n    {\n      className: 'strong',\n      // must not precede or follow a word character\n      begin: /\\*[^\\s]([^\\n]+\\n)+([^\\n]+)\\*/\n    }\n  ];\n  const EMPHASIS = [\n    // inline unconstrained emphasis (single line)\n    {\n      className: 'emphasis',\n      begin: /_{2}([^\\n]+?)_{2}/\n    },\n    // inline unconstrained emphasis (multi-line)\n    {\n      className: 'emphasis',\n      begin: concat(\n        /__/,\n        /((_(?!_)|\\\\[^\\n]|[^_\\n\\\\])+\\n)+/,\n        /(_(?!_)|\\\\[^\\n]|[^_\\n\\\\])*/,\n        /__/\n      ),\n      relevance: 0\n    },\n    // inline constrained emphasis (single line)\n    {\n      className: 'emphasis',\n      // must not precede or follow a word character\n      begin: /\\b_(\\S|\\S[^\\n]*?\\S)_(?!\\w)/\n    },\n    // inline constrained emphasis (multi-line)\n    {\n      className: 'emphasis',\n      // must not precede or follow a word character\n      begin: /_[^\\s]([^\\n]+\\n)+([^\\n]+)_/\n    },\n    // inline constrained emphasis using single quote (legacy)\n    {\n      className: 'emphasis',\n      // must not follow a word character or be followed by a single quote or space\n      begin: '\\\\B\\'(?![\\'\\\\s])',\n      end: '(\\\\n{2}|\\')',\n      // allow escaped single quote followed by word char\n      contains: [{\n        begin: '\\\\\\\\\\'\\\\w',\n        relevance: 0\n      }],\n      relevance: 0\n    }\n  ];\n  const ADMONITION = {\n    className: 'symbol',\n    begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\\\s+',\n    relevance: 10\n  };\n  const BULLET_LIST = {\n    className: 'bullet',\n    begin: '^(\\\\*+|-+|\\\\.+|[^\\\\n]+?::)\\\\s+'\n  };\n\n  return {\n    name: 'AsciiDoc',\n    aliases: ['adoc'],\n    contains: [\n      // block comment\n      hljs.COMMENT(\n        '^/{4,}\\\\n',\n        '\\\\n/{4,}$',\n        // can also be done as...\n        // '^/{4,}$',\n        // '^/{4,}$',\n        {\n          relevance: 10\n        }\n      ),\n      // line comment\n      hljs.COMMENT(\n        '^//',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      // title\n      {\n        className: 'title',\n        begin: '^\\\\.\\\\w.*$'\n      },\n      // example, admonition & sidebar blocks\n      {\n        begin: '^[=\\\\*]{4,}\\\\n',\n        end: '\\\\n^[=\\\\*]{4,}$',\n        relevance: 10\n      },\n      // headings\n      {\n        className: 'section',\n        relevance: 10,\n        variants: [\n          {\n            begin: '^(={1,6})[ \\t].+?([ \\t]\\\\1)?$'\n          },\n          {\n            begin: '^[^\\\\[\\\\]\\\\n]+?\\\\n[=\\\\-~\\\\^\\\\+]{2,}$'\n          }\n        ]\n      },\n      // document attributes\n      {\n        className: 'meta',\n        begin: '^:.+?:',\n        end: '\\\\s',\n        excludeEnd: true,\n        relevance: 10\n      },\n      // block attributes\n      {\n        className: 'meta',\n        begin: '^\\\\[.+?\\\\]$',\n        relevance: 0\n      },\n      // quoteblocks\n      {\n        className: 'quote',\n        begin: '^_{4,}\\\\n',\n        end: '\\\\n_{4,}$',\n        relevance: 10\n      },\n      // listing and literal blocks\n      {\n        className: 'code',\n        begin: '^[\\\\-\\\\.]{4,}\\\\n',\n        end: '\\\\n[\\\\-\\\\.]{4,}$',\n        relevance: 10\n      },\n      // passthrough blocks\n      {\n        begin: '^\\\\+{4,}\\\\n',\n        end: '\\\\n\\\\+{4,}$',\n        contains: [{\n          begin: '<',\n          end: '>',\n          subLanguage: 'xml',\n          relevance: 0\n        }],\n        relevance: 10\n      },\n\n      BULLET_LIST,\n      ADMONITION,\n      ...ESCAPED_FORMATTING,\n      ...STRONG,\n      ...EMPHASIS,\n\n      // inline smart quotes\n      {\n        className: 'string',\n        variants: [\n          {\n            begin: \"``.+?''\"\n          },\n          {\n            begin: \"`.+?'\"\n          }\n        ]\n      },\n      // inline unconstrained emphasis\n      {\n        className: 'code',\n        begin: /`{2}/,\n        end: /(\\n{2}|`{2})/\n      },\n      // inline code snippets (TODO should get same treatment as strong and emphasis)\n      {\n        className: 'code',\n        begin: '(`.+?`|\\\\+.+?\\\\+)',\n        relevance: 0\n      },\n      // indented literal block\n      {\n        className: 'code',\n        begin: '^[ \\\\t]',\n        end: '$',\n        relevance: 0\n      },\n      HORIZONTAL_RULE,\n      // images and links\n      {\n        begin: '(link:)?(http|https|ftp|file|irc|image:?):\\\\S+?\\\\[[^[]*?\\\\]',\n        returnBegin: true,\n        contains: [\n          {\n            begin: '(link|image:?):',\n            relevance: 0\n          },\n          {\n            className: 'link',\n            begin: '\\\\w',\n            end: '[^\\\\[]+',\n            relevance: 0\n          },\n          {\n            className: 'string',\n            begin: '\\\\[',\n            end: '\\\\]',\n            excludeBegin: true,\n            excludeEnd: true,\n            relevance: 0\n          }\n        ],\n        relevance: 10\n      }\n    ]\n  };\n}\n\nmodule.exports = asciidoc;\n","/*\nLanguage: AutoHotkey\nAuthor: Seongwon Lee <dlimpid@gmail.com>\nDescription: AutoHotkey language definition\nCategory: scripting\n*/\n\n/** @type LanguageFn */\nfunction autohotkey(hljs) {\n  const BACKTICK_ESCAPE = {\n    begin: '`[\\\\s\\\\S]'\n  };\n\n  return {\n    name: 'AutoHotkey',\n    case_insensitive: true,\n    aliases: ['ahk'],\n    keywords: {\n      keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',\n      literal: 'true false NOT AND OR',\n      built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel'\n    },\n    contains: [\n      BACKTICK_ESCAPE,\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        contains: [BACKTICK_ESCAPE]\n      }),\n      hljs.COMMENT(';', '$', {\n        relevance: 0\n      }),\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'number',\n        begin: hljs.NUMBER_RE,\n        relevance: 0\n      },\n      {\n        // subst would be the most accurate however fails the point of\n        // highlighting. variable is comparably the most accurate that actually\n        // has some effect\n        className: 'variable',\n        begin: '%[a-zA-Z0-9#_$@]+%'\n      },\n      {\n        className: 'built_in',\n        begin: '^\\\\s*\\\\w+\\\\s*(,|%)'\n        // I don't really know if this is totally relevant\n      },\n      {\n        // symbol would be most accurate however is highlighted just like\n        // built_in and that makes up a lot of AutoHotkey code meaning that it\n        // would fail to highlight anything\n        className: 'title',\n        variants: [\n          {\n            begin: '^[^\\\\n\";]+::(?!=)'\n          },\n          {\n            begin: '^[^\\\\n\";]+:(?!=)',\n            // zero relevance as it catches a lot of things\n            // followed by a single ':' in many languages\n            relevance: 0\n          }\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '^\\\\s*#\\\\w+',\n        end: '$',\n        relevance: 0\n      },\n      {\n        className: 'built_in',\n        begin: 'A_[a-zA-Z0-9]+'\n      },\n      {\n        // consecutive commas, not for highlighting but just for relevance\n        begin: ',\\\\s*,'\n      }\n    ]\n  };\n}\n\nmodule.exports = autohotkey;\n","/*\nLanguage: AutoIt\nAuthor: Manh Tuan <junookyo@gmail.com>\nDescription: AutoIt language definition\nCategory: scripting\n*/\n\n/** @type LanguageFn */\nfunction autoit(hljs) {\n  const KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' +\n        'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' +\n        'EndSwitch EndWith Enum Exit ExitLoop For Func ' +\n        'Global If In Local Next ReDim Return Select Static ' +\n        'Step Switch Then To Until Volatile WEnd While With';\n\n  const LITERAL = 'True False And Null Not Or';\n\n  const BUILT_IN\n          = 'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait';\n\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT(';', '$', {\n        relevance: 0\n      }),\n      hljs.COMMENT('#cs', '#ce'),\n      hljs.COMMENT('#comments-start', '#comments-end')\n    ]\n  };\n\n  const VARIABLE = {\n    begin: '\\\\$[A-z0-9_]+'\n  };\n\n  const STRING = {\n    className: 'string',\n    variants: [\n      {\n        begin: /\"/,\n        end: /\"/,\n        contains: [{\n          begin: /\"\"/,\n          relevance: 0\n        }]\n      },\n      {\n        begin: /'/,\n        end: /'/,\n        contains: [{\n          begin: /''/,\n          relevance: 0\n        }]\n      }\n    ]\n  };\n\n  const NUMBER = {\n    variants: [\n      hljs.BINARY_NUMBER_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '#',\n    end: '$',\n    keywords: {\n      'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      {\n        beginKeywords: 'include',\n        keywords: {\n          'meta-keyword': 'include'\n        },\n        end: '$',\n        contains: [\n          STRING,\n          {\n            className: 'meta-string',\n            variants: [\n              {\n                begin: '<',\n                end: '>'\n              },\n              {\n                begin: /\"/,\n                end: /\"/,\n                contains: [{\n                  begin: /\"\"/,\n                  relevance: 0\n                }]\n              },\n              {\n                begin: /'/,\n                end: /'/,\n                contains: [{\n                  begin: /''/,\n                  relevance: 0\n                }]\n              }\n            ]\n          }\n        ]\n      },\n      STRING,\n      COMMENT\n    ]\n  };\n\n  const CONSTANT = {\n    className: 'symbol',\n    // begin: '@',\n    // end: '$',\n    // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',\n    // relevance: 5\n    begin: '@[A-z0-9_]+'\n  };\n\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'Func',\n    end: '$',\n    illegal: '\\\\$|\\\\[|%',\n    contains: [\n      hljs.UNDERSCORE_TITLE_MODE,\n      {\n        className: 'params',\n        begin: '\\\\(',\n        end: '\\\\)',\n        contains: [\n          VARIABLE,\n          STRING,\n          NUMBER\n        ]\n      }\n    ]\n  };\n\n  return {\n    name: 'AutoIt',\n    case_insensitive: true,\n    illegal: /\\/\\*/,\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_IN,\n      literal: LITERAL\n    },\n    contains: [\n      COMMENT,\n      VARIABLE,\n      STRING,\n      NUMBER,\n      PREPROCESSOR,\n      CONSTANT,\n      FUNCTION\n    ]\n  };\n}\n\nmodule.exports = autoit;\n","/*\nLanguage: AVR Assembly\nAuthor: Vladimir Ermakov <vooon341@gmail.com>\nCategory: assembler\nWebsite: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html\n*/\n\n/** @type LanguageFn */\nfunction avrasm(hljs) {\n  return {\n    name: 'AVR Assembly',\n    case_insensitive: true,\n    keywords: {\n      $pattern: '\\\\.?' + hljs.IDENT_RE,\n      keyword:\n        /* mnemonic */\n        'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +\n        'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +\n        'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +\n        'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +\n        'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +\n        'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +\n        'subi swap tst wdr',\n      built_in:\n        /* general purpose registers */\n        'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +\n        'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +\n        /* IO Registers (ATMega128) */\n        'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +\n        'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +\n        'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +\n        'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +\n        'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +\n        'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +\n        'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +\n        'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',\n      meta:\n        '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +\n        '.listmac .macro .nolist .org .set'\n    },\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.COMMENT(\n        ';',\n        '$',\n        {\n          relevance: 0\n        }\n      ),\n      hljs.C_NUMBER_MODE, // 0x..., decimal, float\n      hljs.BINARY_NUMBER_MODE, // 0b...\n      {\n        className: 'number',\n        begin: '\\\\b(\\\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        begin: '\\'',\n        end: '[^\\\\\\\\]\\'',\n        illegal: '[^\\\\\\\\][^\\']'\n      },\n      {\n        className: 'symbol',\n        begin: '^[A-Za-z0-9_.$]+:'\n      },\n      {\n        className: 'meta',\n        begin: '#',\n        end: '$'\n      },\n      { // substitution within a macro\n        className: 'subst',\n        begin: '@[0-9]+'\n      }\n    ]\n  };\n}\n\nmodule.exports = avrasm;\n","/*\nLanguage: Awk\nAuthor: Matthew Daly <matthewbdaly@gmail.com>\nWebsite: https://www.gnu.org/software/gawk/manual/gawk.html\nDescription: language definition for Awk scripts\n*/\n\n/** @type LanguageFn */\nfunction awk(hljs) {\n  const VARIABLE = {\n    className: 'variable',\n    variants: [\n      {\n        begin: /\\$[\\w\\d#@][\\w\\d_]*/\n      },\n      {\n        begin: /\\$\\{(.*?)\\}/\n      }\n    ]\n  };\n  const KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [\n      {\n        begin: /(u|b)?r?'''/,\n        end: /'''/,\n        relevance: 10\n      },\n      {\n        begin: /(u|b)?r?\"\"\"/,\n        end: /\"\"\"/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /(u|r|ur)\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /(b|br)'/,\n        end: /'/\n      },\n      {\n        begin: /(b|br)\"/,\n        end: /\"/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n  return {\n    name: 'Awk',\n    keywords: {\n      keyword: KEYWORDS\n    },\n    contains: [\n      VARIABLE,\n      STRING,\n      hljs.REGEXP_MODE,\n      hljs.HASH_COMMENT_MODE,\n      hljs.NUMBER_MODE\n    ]\n  };\n}\n\nmodule.exports = awk;\n","/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction bash(hljs) {\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end:/\\}/,\n    contains: [\n      \"self\",\n      {\n        begin: /:-/,\n        contains: [ VAR ]\n      } // default values\n    ]\n  };\n  Object.assign(VAR,{\n    className: 'variable',\n    variants: [\n      {begin: concat(/\\$[\\w\\d#@][\\w\\d_]*/,\n        // negative look-ahead tries to avoid matching patterns that are not\n        // Perl at all like $ident$, @ident@, etc.\n        `(?![\\\\w\\\\d])(?![$])`) },\n      BRACED_VAR\n    ]\n  });\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: {\n      contains: [\n        hljs.END_SAME_AS_BEGIN({\n          begin: /(\\w+)/,\n          end: /(\\w+)/,\n          className: 'string'\n        })\n      ]\n    }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/, end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      SUBST\n    ]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    className: '',\n    begin: /\\\\\"/\n\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/, end: /'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$\\(\\(/,\n    end: /\\)\\)/,\n    contains: [\n      { begin: /\\d+#[0-9a-f]+/, className: \"number\" },\n      hljs.NUMBER_MODE,\n      VAR\n    ]\n  };\n  const SH_LIKE_SHELLS = [\n    \"fish\",\n    \"bash\",\n    \"zsh\",\n    \"sh\",\n    \"csh\",\n    \"ksh\",\n    \"tcsh\",\n    \"dash\",\n    \"scsh\",\n  ];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\\w[\\w\\d_]*/})],\n    relevance: 0\n  };\n\n  return {\n    name: 'Bash',\n    aliases: ['sh', 'zsh'],\n    keywords: {\n      $pattern: /\\b[a-z._-]+\\b/,\n      keyword:\n        'if then else elif fi for while in do done case esac function',\n      literal:\n        'true false',\n      built_in:\n        // Shell built-ins\n        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +\n        'trap umask unset ' +\n        // Bash built-ins\n        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +\n        'read readarray source type typeset ulimit unalias ' +\n        // Shell modifiers\n        'set shopt ' +\n        // Zsh built-ins\n        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +\n        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +\n        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +\n        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +\n        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +\n        'zpty zregexparse zsocket zstyle ztcp'\n    },\n    contains: [\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n      FUNCTION,\n      ARITHMETIC,\n      hljs.HASH_COMMENT_MODE,\n      HERE_DOC,\n      QUOTE_STRING,\n      ESCAPED_QUOTE,\n      APOS_STRING,\n      VAR\n    ]\n  };\n}\n\nmodule.exports = bash;\n"],"sourceRoot":""}